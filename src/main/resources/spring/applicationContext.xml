<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:http="http://www.springframework.org/schema/c"
       xmlns:sharding="http://shardingsphere.io/schema/shardingsphere/sharding"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
		http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task-3.1.xsd
        http://shardingsphere.io/schema/shardingsphere/sharding
        http://shardingsphere.io/schema/shardingsphere/sharding/sharding.xsd">


    <!--引入属性文件 -->
    <bean id="propertyConfigurer"
          class="com.escst.commons.decrypt.EncryptPropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:properties/jdbc.properties</value>
                <value>classpath:properties/redis.properties</value>
                <value>classpath:properties/sysConfig.properties</value>
            </list>
        </property>
    </bean>

    <!-- 配置数据源 使用的是Druid连接池 -->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 初始化连接大小 -->
        <property name="initialSize" value="0"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="20"/>

        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="0"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000"/>
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="33"/>
        <!-- 用来检测有效sql -->
        <property name="validationQuery" value="${jdbc.validationQuery}"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!--指明连接是否被空闲连接回收器(如果有)进行检验，如果检测失败，则连接将被从池中去除-->
        <property name="testWhileIdle" value="true"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000"/>
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>
        <!-- 监控数据库 -->
        <property name="filters" value="mergeStat"/>
    </bean>

    <!-- 自动扫描注解的bean -->
    <context:component-scan base-package="com.escst">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 激活自动代理功能 Aspect切面编程 -->
    <aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true"/>

    <!-- 自动扫描所有的xxxMapper.xml对应的mapper接口文件，这样就不用手动配置Mapper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了 -->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--<property name="dataSource" ref="shardingDataSource"/>-->
        <!--<property name="mapperLocations" value="classpath*:com/escst/towerCrane/mapper/*.xml"/>-->
        <!--<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>-->
    <!--</bean>-->

    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--<property name="basePackage" value="com.escst.towerCrane.mapper"/>-->
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 配置事务管理器 &ndash;&gt;-->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="shardingDataSource"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 配置事务的注解方式注入 &ndash;&gt;-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->

    <!-- 开启定时任务 -->
    <task:annotation-driven/>

    <import resource="spring-redis.xml"/>


    <!-- 分表策略  精确分片算法 -->
    <bean id="preciseTableStrategy" class="com.escst.commons.sharding.TableShardingAlgorithm"/>

    <!-- 具体某个表的分表策略 -->
    <sharding:standard-strategy id="tableStrategy" sharding-column="equipment_id"
                                precise-algorithm-ref="preciseTableStrategy"/>

    <!--数据源给sharding管理-->
    <sharding:data-source id="shardingDataSource">
        <sharding:sharding-rule data-source-names="dataSource">
            <sharding:table-rules>
                <sharding:table-rule logic-table="t_basic_towercrane_realtime_history"
                                     actual-data-nodes="dataSource.t_towercrane_data_$->{0..1}"
                                     table-strategy-ref="tableStrategy"/>
            </sharding:table-rules>
        </sharding:sharding-rule>
    </sharding:data-source>


    <!--==============================不分表数据源配置================================-->
     <!--自动扫描所有的xxxMapper.xml对应的mapper接口文件，这样就不用手动配置Mapper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了 -->
    <bean id="sqlSessionFactory_a" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <property name="mapperLocations" value="classpath*:com/escst/*/mapper/*.xml"/>
    <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="com.escst.*.mapper"/>
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory_a"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager_a" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置事务的注解方式注入 -->
    <tx:annotation-driven transaction-manager="transactionManager_a"/>

</beans>